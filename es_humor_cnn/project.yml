title: "Detecci√≥n de humor voluntario con CNN y vectores de palabras"
description: "Ejemplo de como funciona el aprendizaje con vectores de palabras."
# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  name: "es_humor"
  version: "0.0.1"
  # Choose your GPU here
  gpu_id: -1
  # Change this to "bert" to use the transformer-based model
  config: "cnn"

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["assets", "training", "configs", "metrics", "packages", "scripts", "corpus"]

# Assets that should be downloaded or available in the directory.
assets:
  - dest: "assets/haha_2021_train.csv"
    description: "Conjunto de aprendizaje en bruto"
  # Uncomment this asset if you want to download the vectors.
  - dest: "assets/vectors.gz" 
    url: "https://dl.fbaipublicfiles.com/fasttext/vectors-crawl/cc.es.300.vec.gz"

# Workflows are sequences of commands (see below) executed in order. You can
# run them via "spacy project run [workflow]". If a commands's inputs/outputs
# haven't changed, it won't be re-run.
workflows:
  all:
    - preprocess
    - train-fasttext  #train   (cambiar dependiendo que se quiere hacer)
    - evaluate
    - package

# Project commands, specified in a style similar to CI config files (e.g. Azure
# pipelines). The name is the command name that lets you trigger the command
# via "spacy project run [command] [path]". The help message is optional and
# shown when executing "spacy project run [optional command] [path] --help".
commands:
  - name: init-vectors
    help: Download vectors and convert to model
    script:
      - "python -m spacy init vectors es assets/vectors.gz assets/es_fasttext_vectors"
    deps:
      - "assets/vectors.gz"
    outputs_no_cache:
      - "assets/es_vectors_web_lg"

  - name: preprocess
    help: "Convert the corpus to spaCy's format"
    script:
      - "python scripts/convert.py es assets/haha_2021_train.csv corpus/train.spacy corpus/dev.spacy"
    deps:
      - "assets/haha_2021_train.csv"
    outputs_no_cache:
      - "corpus/train.spacy"
      - "corpus/dev.spacy"

  - name: train
    help: "Train a spaCy pipeline using the specified corpus and config"
    script:
      - python -c "import os; os.makedirs(os.path.join('training', '${vars.config}'))"
      - "python -m spacy train ./configs/${vars.config}.cfg -o training/${vars.config} --gpu-id ${vars.gpu_id}"
    deps:
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
      - "configs/${vars.config}.cfg"
    outputs:
      - "training/${vars.config}/model-best"

  - name: train-fasttext
    help: "Train a spaCy pipeline with fasttext embedding vector"
    script:
      - python -c "import os; os.makedirs(os.path.join('training', '${vars.config}'))"
      - "python -m spacy train ./configs/${vars.config}.cfg -o training/${vars.config} --gpu-id ${vars.gpu_id}  --paths.vectors \"assets/es_fasttext_vectors\" --components.textcat.model.tok2vec.embed.include_static_vectors true"
    deps:
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
      - "configs/${vars.config}.cfg"
    outputs:
      - "training/${vars.config}/model-best"


  - name: evaluate
    help: "Evaluate on the test data and save the metrics"
    script:
      - "python -m spacy evaluate ./training/${vars.config}/model-best ./corpus/dev.spacy --output ./metrics/${vars.config}.json"
    deps:
      - "training/${vars.config}/model-best"
      - "corpus/dev.spacy"
    outputs:
      - "metrics/${vars.config}.json"

  - name: package
    help: "Package the trained model so it can be installed"
    script:
      - "python -m spacy package ./training/${vars.config}/model-best packages/ --name ${vars.name} --force --version ${vars.version}"
    deps:
      - "training/${vars.config}/model-best"
    outputs_no_cache:
      - "packages/${vars.name}-${vars.version}/dist/${vars.name}-${vars.version}.tar.gz"

  - name: visualize
    help: Visualize the model's output interactively using Streamlit
    script:
      - "streamlit run scripts/visualize_model.py training/${vars.config}/model-best \"Escribe aqui el texto a evaluar\""
    deps:
      - "scripts/visualize_model.py"
      - "training/${vars.config}/model-best"
